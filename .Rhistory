"\t", "888   `Y88.  ", "Pkg lib(s):", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "          User:", Sys.info()[8], "\n",
"\t", "888ooo88P'   ", "\n",
"\t", "888`88b.     ", "\n",
"\t", "888  `88b.   ", "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
catout = c(
"\n",
"\t", "ooooooooo.   ", "            OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "          User:", Sys.info()[8], "\n",
"\t", "888ooo88P'   ", "\n",
"\t", "888`88b.     ", "\n",
"\t", "888  `88b.   ", "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "    User:", Sys.info()[8], "\n",
"\t", "888ooo88P'   ", "\n",
"\t", "888`88b.     ", "\n",
"\t", "888  `88b.   ", "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "Computer:", Sys.info()[4], "\n",
"\t", "888ooo88P'   ", "    User:", Sys.info()[8], "\n",
"\t", "888`88b.     ", "\n",
"\t", "888  `88b.   ", "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
sessioninfo::platform_info()
parallel::detectCores
parallel:::C_ncpus
parallel::detectCores()
.Platform
sessionInfo()
system("wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status")
x = system("wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status")
x
capture.output(x = system("wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status"))
x = system("wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status",intern = T)
x
cpuname = system("wmic cpu get name",intern = T)
cpuname
cpuname[2]
cputhread = parallel::detectCores()
cputhread
a <- system("wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime", intern = TRUE)
a
system("wmic cpu",intern = T)
cpuname = system("wmic cpu get name, ThreadCount",intern = T)
cpuname
sessioninfo::platform_info()
cpuinfo = system("wmic cpu get name, ThreadCount, numberofcores, maxclockspeed",intern = T)
as.data.frame(cpuinfo)
View(cpuinfo)
cpuinfo[3] = NULL
cpuinfo = cpuinfo[1:2]
cpuinfo
substr(cpuinfo[2], 0, nchar(cpuinfo[2])-3)
cpuinfo = trimws(substr(cpuinfo[2], 0, nchar(cpuinfo[2]) - 2))
cpuinfo
cpuinfo = strsplit(cpuinfo, "\\s\\s")
cpuinfo
cpuinfo = strsplit(cpuinfo, "\\s+")
cpuinfo = strsplit(cpuinfo, "\\S+")
cpuinfo = strsplit(cpuinfo, " +")
cpuinfo = strsplit(cpuinfo, "  ")
cpuinfo = trimws(strsplit(cpuinfo, "\\s\\s"))
cpuinfo = system("wmic cpu get name, ThreadCount, numberofcores, maxclockspeed",intern = T)
cpuinfo = trimws(substr(cpuinfo[2], 0, nchar(cpuinfo[2]) - 2))
cpuinfo = trimws(strsplit(cpuinfo, "\\s\\s"))
cpuinfo
cpuinfo = system("wmic cpu get name, ThreadCount, numberofcores, maxclockspeed",intern = T)
cpuinfo = trimws(substr(cpuinfo[2], 0, nchar(cpuinfo[2]) - 2))
cpuinfo = strsplit(cpuinfo, "  +")
cpuinfo
cpuinfo = system("wmic cpu get name, ThreadCount, numberofcores, maxclockspeed",intern = T)
cpuinfo = trimws(substr(cpuinfo[2], 0, nchar(cpuinfo[2]) - 2))
cpuinfo = unlist(strsplit(cpuinfo, "  +"))
cpuinfo
cpuinfo = system("wmic cpu get maxclockspeed, name, ThreadCount, numberofcores",intern = T)
cpuinfo = trimws(substr(cpuinfo[2], 0, nchar(cpuinfo[2]) - 2))
cpuinfo = unlist(strsplit(cpuinfo, "  +"))
cpuinfo
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "Computer:", Sys.info()[4], "\n",
"\t", "888ooo88P'   ", "    User:", Sys.info()[8], "\n",
"\t", "888`88b.     ", "     CPU:", cpuinfo[2], "\n",
"\t", "888  `88b.   ", "   Cores:", cat(cpuinfo[3],"(",cpuinfo[4],")", "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
# ooooooooo.
# 888   `Y88.
# 888   .d88'
# 888ooo88P'
# 888`88b.
# 888  `88b.
# o888o  o888o
#   8888888b.
#   888   Y88b
#   888    888
#   888   d88P
#   8888888P"
#   888 T88b
#   888  T88b
#   888   T88b
}
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "Computer:", Sys.info()[4], "\n",
"\t", "888ooo88P'   ", "    User:", Sys.info()[8], "\n",
"\t", "888`88b.     ", "     CPU:", cpuinfo[2], "\n",
"\t", "888  `88b.   ", "   Cores:", cat(cpuinfo[3],"(",cpuinfo[4],")"), "\n",
"\t", "o888o  o888o ", "\n"
)
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "Computer:", Sys.info()[4], "\n",
"\t", "888ooo88P'   ", "    User:", Sys.info()[8], "\n",
"\t", "888`88b.     ", "     CPU:", cpuinfo[2], "\n",
"\t", "888  `88b.   ", "   Cores:", cat(cpuinfo[3],"(",cpuinfo[4],")"), "\n",
"\t", "o888o  o888o ", "\n"
)
cat(cpuinfo[3],"(",cpuinfo[4],")")
paste0(cpuinfo[3],"(",cpuinfo[4],")")
cpucore = paste0(cpuinfo[3],"(",cpuinfo[4],")")
catout = c(
"\n",
"\t", "ooooooooo.   ", "      OS:", Sys.info()[c(1,2)], "\n",
"\t", "888   `Y88.  ", "Pkg libs:", path.expand(Sys.getenv("R_LIBS")), "\n",
"\t", "888   .d88'  ", "Computer:", Sys.info()[4], "\n",
"\t", "888ooo88P'   ", "    User:", Sys.info()[8], "\n",
"\t", "888`88b.     ", "     CPU:", cpuinfo[2], "\n",
"\t", "888  `88b.   ", "   Cores:", cpucore, "\n",
"\t", "o888o  o888o ", "\n"
)
cat(catout)
library(fetchinfo)
gpu = system("wmic path win32_VideoController get name", intern = T)
gpu = system("wmic path win32_VideoController", intern = T)
gpu
gpu[1]
gpu = system("wmic path win32_VideoController", intern = T)
gpu = trimws(substr(gpu[2], 0, nchar(gpu[2]) - 2))
gpu = unlist(strsplit(gpu, "  +"))
gpu = paste0(gpu[3],"(",gpu[4],")")
gpu
gpu = system("wmic path win32_VideoController", intern = T)
gpu = trimws(substr(gpu[1], 0, nchar(gpu[1]) - 2))
gpu
gpu = unlist(strsplit(gpu, "  +"))
gpu
gpunames = trimws(substr(gpu[1], 0, nchar(gpu[1]) - 2))
gpuvalues = trimws(substr(gpu[2], 0, nchar(gpu[2]) - 2))
gpu = system("wmic path win32_VideoController", intern = T)
gpunames = trimws(substr(gpu[1], 0, nchar(gpu[1]) - 2))
gpuvalues = trimws(substr(gpu[2], 0, nchar(gpu[2]) - 2))
gpu = data.frame(unlist(strsplit(gpunames, "  +")),  unlist(strsplit(gpuvalues, "  +")))
gpuvalues
gpunames
unlist(strsplit(gpunames, "  +"))
gpu = system("wmic path win32_VideoController get name AdapterRAM MaxMemorySupported VideoMemoryType", intern = T)
gpu = system("wmic path win32_VideoController get name, AdapterRAM, MaxMemorySupported, VideoMemoryType", intern = T)
gpu
size_Gb(4293918720)
gpu2 = system("wmic PATH Win32_videocontroller GET description", intern = T)
gpu2
gpu = system("wmic path win32_VideoController get name, AdapterRAM", intern = T)
gpu
gpu = system("wmic path win32_VideoController get name", intern = T)
gpu
gpu = trimws(substr(gpu[2], 0, nchar(gpu[2]) - 2))
gpu
ram = system('wmic MEMORYCHIP get BankLabel, DeviceLocator, MemoryType, TypeDetail, Capacity, Speed', intern = T)
ram
system('wmic MEMORYCHIP', intern = T)
setwdhere()
library(data.table)
library(tidyverse)
library(plotly)
library(chron)
library(RHESSysIOinR)
library(gridExtra)
library(scales)
library(grid)
library(cowplot)
library(randomForestExplainer)
load("scenarios.rdata")
load("scen.rdata")
# -=================================================-
# -===== Helper Functions =================
# ==================================================-
scen = plyr::rename(scen, c("start_period" = "Aridity",
"treatments" = "Method & Intensity",
"interval" = "Treatment Interval",
"soils" = "Soil Water Capacity",
"sharing" = "Root Sharing",
"treat_type" = "Treatment Type",
"treat_intensity" = "Treatment Intensity",
"presc_fire" = "Prescribed Fire",
"veg" = "Vegetation Type",
"aspect" = "Aspect",
"clim_chg" = "Climate Warming"))
scenarios = plyr::rename(scenarios, c("start_period" = "Aridity",
"treatments" = "Method & Intensity",
"interval" = "Treatment Interval",
"soils" = "Soil Water Capacity",
"sharing" = "Root Sharing",
"treat_type" = "Treatment Type",
"treat_intensity" = "Treatment Intensity",
"presc_fire" = "Prescribed Fire",
"veg" = "Vegetation Type",
"aspect" = "Aspect",
"climate" = "Climate Warming"))
read_robj = function(path) {
DT_all = NULL
load(path)
if ("familyID" %in% colnames(DT_all)) {
DT_all$familyID = NULL
}
days = length(DT_all$run[DT_all$run == 1])
DT_all[, sim_day :=  rep(c(1:days), nrow(DT_all)/days), ]
DT_all[, mn := lubridate::month(date), ]
DT_all[, yr := lubridate::year(date), ]
DT_all[, wy := data.table::fifelse(mn >= 10, yr + 1, yr), ]
DT_all[, wym := data.table::fifelse(mn >= 10, mn - 9, mn + 3), ]
DT_all[, sim_yr := wy - min(DT_all$yr), ]
DT_all[, mn := NULL]
DT_all[, yr := NULL]
return(DT_all)
}
# chg from treatment
treat_change = function(data) {
dt_merge = merge.data.table(data[data$"Method & Intensity" != "no treatment",],
data[data$"Method & Intensity" == "no treatment",
c("Aridity",
"Soil Water Capacity",
"Root Sharing",
"Vegetation Type",
"Aspect",
"Climate Warming",
"V1")],
by = c("Aridity",
"Soil Water Capacity",
"Root Sharing",
"Vegetation Type",
"Aspect",
"Climate Warming"))
dt_merge$treat_chg = dt_merge$V1.x - dt_merge$V1.y
colnames(dt_merge)[colnames(dt_merge) == "V1.x"] = "value"
colnames(dt_merge)[colnames(dt_merge) == "V1.y"] = "notreat_value"
return(dt_merge)
}
treat_change2 = function(data) {
trt = data[data$"Treatment Method & Intensity" != "no treatment", ]
no_trt = data[data$"Treatment Method & Intensity" == "no treatment", !c("Treatment Method & Intensity",
"Treatment Intensity",
"Treatment Interval",
"Prescribed Fire",
"Treatment Type") ]
bycols = colnames(data)[!colnames(data) %in% c("V1",
"value",
"run",
"Treatment Method & Intensity",
"Treatment Intensity",
"Treatment Interval",
"Prescribed Fire",
"Treatment Type")]
dt_merge = merge.data.table(trt, no_trt, by = bycols)
if ("V1.x" %in% colnames(dt_merge)) {
dt_merge$treat_chg = dt_merge$V1.x - dt_merge$V1.y
colnames(dt_merge)[colnames(dt_merge) == "V1.x"] = "value"
colnames(dt_merge)[colnames(dt_merge) == "V1.y"] = "notreat_value"
} else if ("value.x" %in% colnames(dt_merge)) {
dt_merge$treat_chg = dt_merge$value.x - dt_merge$value.y
} else {
cat("no V1 or value")
}
return(dt_merge)
}
# autogen subset and output text
get_fixed_vars = function(DT) {
isf = which(unname(sapply(DT, is.factor)))
un = sapply(DT[ , ..isf ], FUN = unique )
isun = sapply(un, FUN = function(X) length(X) == 1 )
res = sapply(un[isun], as.character)
out = paste(names(res), res, collapse = " | ",sep = ":")
return(out)
}
# group things
mean2sim = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run", all = FALSE)
return(DT_mn)
}
mean2simCS = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run", "stratumID")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run", all = FALSE)
return(DT_mn)
}
# MONTHLY
mean2mn = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run", "sim_yr", "wym")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run")
DT_mn$yr_mn = (DT_mn$wym + (DT_mn$sim_yr - min(DT_mn$sim_yr)) * 12)
return(DT_mn)
}
# ANNUAL
mean2yr = function(DT, scenarios) {
DT_yr = DT[, .(mean(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run")
return(DT_yr)
}
max2yr = function(DT, scenarios) {
DT_yr = DT[, .(max(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run", all = FALSE)
return(DT_yr)
}
# CENTER OF MASS
CoM = function(in_data) {
CoM =  match( TRUE, cumsum(in_data/sum(in_data)) > .5 ) - 1
return(CoM)
}
CoM2yr = function(DT, scenarios) {
DT_yr = DT[, .(CoM(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run")
return(DT_yr)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# -=================================================-
setwdhere()
library(data.table)
library(tidyverse)
library(plotly)
library(chron)
library(RHESSysIOinR)
library(gridExtra)
library(scales)
library(grid)
library(cowplot)
library(randomForestExplainer)
load("scenarios.rdata")
load("scen.rdata")
# -=================================================-
# -===== Helper Functions =================
# ==================================================-
scen = plyr::rename(scen, c("start_period" = "Aridity",
"treatments" = "Method & Intensity",
"interval" = "Treatment Interval",
"soils" = "Soil Water Capacity",
"sharing" = "Root Sharing",
"treat_type" = "Treatment Type",
"treat_intensity" = "Treatment Intensity",
"presc_fire" = "Prescribed Fire",
"veg" = "Vegetation Type",
"aspect" = "Aspect",
"clim_chg" = "Climate Warming"))
scenarios = plyr::rename(scenarios, c("start_period" = "Aridity",
"treatments" = "Method & Intensity",
"interval" = "Treatment Interval",
"soils" = "Soil Water Capacity",
"sharing" = "Root Sharing",
"treat_type" = "Treatment Type",
"treat_intensity" = "Treatment Intensity",
"presc_fire" = "Prescribed Fire",
"veg" = "Vegetation Type",
"aspect" = "Aspect",
"climate" = "Climate Warming"))
read_robj = function(path) {
DT_all = NULL
load(path)
if ("familyID" %in% colnames(DT_all)) {
DT_all$familyID = NULL
}
days = length(DT_all$run[DT_all$run == 1])
DT_all[, sim_day :=  rep(c(1:days), nrow(DT_all)/days), ]
DT_all[, mn := lubridate::month(date), ]
DT_all[, yr := lubridate::year(date), ]
DT_all[, wy := data.table::fifelse(mn >= 10, yr + 1, yr), ]
DT_all[, wym := data.table::fifelse(mn >= 10, mn - 9, mn + 3), ]
DT_all[, sim_yr := wy - min(DT_all$yr), ]
DT_all[, mn := NULL]
DT_all[, yr := NULL]
return(DT_all)
}
# chg from treatment
treat_change = function(data) {
dt_merge = merge.data.table(data[data$"Method & Intensity" != "no treatment",],
data[data$"Method & Intensity" == "no treatment",
c("Aridity",
"Soil Water Capacity",
"Root Sharing",
"Vegetation Type",
"Aspect",
"Climate Warming",
"V1")],
by = c("Aridity",
"Soil Water Capacity",
"Root Sharing",
"Vegetation Type",
"Aspect",
"Climate Warming"))
dt_merge$treat_chg = dt_merge$V1.x - dt_merge$V1.y
colnames(dt_merge)[colnames(dt_merge) == "V1.x"] = "value"
colnames(dt_merge)[colnames(dt_merge) == "V1.y"] = "notreat_value"
return(dt_merge)
}
treat_change2 = function(data) {
trt = data[data$"Treatment Method & Intensity" != "no treatment", ]
no_trt = data[data$"Treatment Method & Intensity" == "no treatment", !c("Treatment Method & Intensity",
"Treatment Intensity",
"Treatment Interval",
"Prescribed Fire",
"Treatment Type") ]
bycols = colnames(data)[!colnames(data) %in% c("V1",
"value",
"run",
"Treatment Method & Intensity",
"Treatment Intensity",
"Treatment Interval",
"Prescribed Fire",
"Treatment Type")]
dt_merge = merge.data.table(trt, no_trt, by = bycols)
if ("V1.x" %in% colnames(dt_merge)) {
dt_merge$treat_chg = dt_merge$V1.x - dt_merge$V1.y
colnames(dt_merge)[colnames(dt_merge) == "V1.x"] = "value"
colnames(dt_merge)[colnames(dt_merge) == "V1.y"] = "notreat_value"
} else if ("value.x" %in% colnames(dt_merge)) {
dt_merge$treat_chg = dt_merge$value.x - dt_merge$value.y
} else {
cat("no V1 or value")
}
return(dt_merge)
}
# autogen subset and output text
get_fixed_vars = function(DT) {
isf = which(unname(sapply(DT, is.factor)))
un = sapply(DT[ , ..isf ], FUN = unique )
isun = sapply(un, FUN = function(X) length(X) == 1 )
res = sapply(un[isun], as.character)
out = paste(names(res), res, collapse = " | ",sep = ":")
return(out)
}
# group things
mean2sim = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run", all = FALSE)
return(DT_mn)
}
mean2simCS = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run", "stratumID")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run", all = FALSE)
return(DT_mn)
}
# MONTHLY
mean2mn = function(DT, scenarios) {
DT_mn = DT[, .(mean(value)), by = c("run", "sim_yr", "wym")]
DT_mn = merge.data.table(DT_mn, scenarios, by = "run")
DT_mn$yr_mn = (DT_mn$wym + (DT_mn$sim_yr - min(DT_mn$sim_yr)) * 12)
return(DT_mn)
}
# ANNUAL
mean2yr = function(DT, scenarios) {
DT_yr = DT[, .(mean(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run")
return(DT_yr)
}
max2yr = function(DT, scenarios) {
DT_yr = DT[, .(max(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run", all = FALSE)
return(DT_yr)
}
# CENTER OF MASS
CoM = function(in_data) {
CoM =  match( TRUE, cumsum(in_data/sum(in_data)) > .5 ) - 1
return(CoM)
}
CoM2yr = function(DT, scenarios) {
DT_yr = DT[, .(CoM(value)), by = c("run", "sim_yr")]
DT_yr = merge.data.table(DT_yr, scenarios, by = "run")
return(DT_yr)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# -=================================================-
